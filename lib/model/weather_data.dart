import 'package:flutter/material.dart';
import '../core/constants/weather_emojis.dart'; // Import de votre biblioth√®que

class WeatherData {
  final String cityName;
  final String country;
  final double temperature;
  final double feelsLike;
  final String description;
  final String icon;
  final int humidity;
  final double pressure;
  final double windSpeed;
  final int visibility;
  final DateTime dateTime;
  final DateTime? sunrise;
  final DateTime? sunset;

  // ‚≠ê NOUVELLES PROPRI√âT√âS POUR LA G√âOLOCALISATION
  final double? latitude;
  final double? longitude;

  WeatherData({
    required this.cityName,
    required this.country,
    required this.temperature,
    required this.feelsLike,
    required this.description,
    required this.icon,
    required this.humidity,
    required this.pressure,
    required this.windSpeed,
    required this.visibility,
    required this.dateTime,
    this.sunrise,
    this.sunset,
    // ‚≠ê PARAM√àTRES OPTIONNELS POUR LA G√âOLOCALISATION
    this.latitude,
    this.longitude,
  });

  factory WeatherData.fromJson(Map<String, dynamic> json) {
    return WeatherData(
      cityName: json['name'] ?? '',
      country: json['sys']?['country'] ?? '',
      temperature: (json['main']?['temp'] ?? 0).toDouble(),
      feelsLike: (json['main']?['feels_like'] ?? 0).toDouble(),
      description: json['weather']?[0]?['description'] ?? '',
      icon: json['weather']?[0]?['icon'] ?? '01d',
      humidity: json['main']?['humidity'] ?? 0,
      pressure: (json['main']?['pressure'] ?? 0).toDouble(),
      windSpeed: (json['wind']?['speed'] ?? 0).toDouble(),
      visibility: json['visibility'] ?? 0,
      dateTime: DateTime.fromMillisecondsSinceEpoch(
        (json['dt'] ?? 0) * 1000,
      ),
      sunrise: json['sys']?['sunrise'] != null
          ? DateTime.fromMillisecondsSinceEpoch(json['sys']['sunrise'] * 1000)
          : null,
      sunset: json['sys']?['sunset'] != null
          ? DateTime.fromMillisecondsSinceEpoch(json['sys']['sunset'] * 1000)
          : null,
      // ‚≠ê EXTRACTION DES COORDONN√âES DEPUIS L'API
      latitude: json['coord']?['lat']?.toDouble(),
      longitude: json['coord']?['lon']?.toDouble(),
    );
  }

  // ‚≠ê FACTORY CONSTRUCTOR AVEC COORDONN√âES EXPLICITES
  factory WeatherData.withCoordinates({
    required String cityName,
    required String country,
    required double temperature,
    required double feelsLike,
    required String description,
    required String icon,
    required int humidity,
    required double pressure,
    required double windSpeed,
    required int visibility,
    required DateTime dateTime,
    required double latitude,
    required double longitude,
    DateTime? sunrise,
    DateTime? sunset,
  }) {
    return WeatherData(
      cityName: cityName,
      country: country,
      temperature: temperature,
      feelsLike: feelsLike,
      description: description,
      icon: icon,
      humidity: humidity,
      pressure: pressure,
      windSpeed: windSpeed,
      visibility: visibility,
      dateTime: dateTime,
      sunrise: sunrise,
      sunset: sunset,
      latitude: latitude,
      longitude: longitude,
    );
  }

  // ============================================
  // üéØ GETTERS POUR AFFICHAGE
  // ============================================

  String get displayName => '$cityName, $country';
  String get temperatureString => '${temperature.round()}¬∞C';
  String get feelsLikeString => '${feelsLike.round()}¬∞C';
  String get pressureString => '${pressure.round()} hPa';
  String get windSpeedString => '${windSpeed.round()} m/s';
  String get visibilityString => '${(visibility / 1000).round()} km';
  String get humidityString => '$humidity%';

  // ‚≠ê NOUVEAUX GETTERS POUR LES COORDONN√âES
  String get coordinatesString {
    if (latitude != null && longitude != null) {
      return '${latitude!.toStringAsFixed(4)}, ${longitude!.toStringAsFixed(4)}';
    }
    return 'Coordonn√©es non disponibles';
  }

  bool get hasCoordinates => latitude != null && longitude != null;

  // ============================================
  // üé® EMOJIS M√âT√âO (GETTERS EXISTANTS)
  // ============================================

  /// Emoji m√©t√©o principal bas√© sur le code OpenWeatherMap
  String get iconEmoji => WeatherEmojis.getWeatherEmoji(icon);

  /// Emoji m√©t√©o intelligent (prend en compte temp√©rature, vent, etc.)
  String get smartEmoji => WeatherEmojis.getSmartEmoji(
    iconCode: icon,
    temperature: temperature,
    windSpeed: windSpeed,
    humidity: humidity,
  );

  /// Emoji bas√© sur la temp√©rature uniquement
  String get temperatureEmoji => WeatherEmojis.getTemperatureEmoji(temperature);

  /// Emoji bas√© sur le vent uniquement
  String get windEmoji => WeatherEmojis.getWindEmoji(windSpeed);

  /// Emoji bas√© sur l'humidit√© uniquement
  String get humidityEmoji => WeatherEmojis.getHumidityEmoji(humidity);

  /// Emoji alternatif al√©atoire de la m√™me cat√©gorie
  String get randomCategoryEmoji => WeatherEmojis.getRandomEmoji(weatherCategory);

  /// Cat√©gorie m√©t√©o (sunny, rainy, etc.)
  String get weatherCategory => WeatherEmojis.getWeatherCategory(icon);

  /// Description de l'emoji m√©t√©o
  String get emojiDescription => WeatherEmojis.getEmojiDescription(icon);

  /// V√©rifie si c'est la nuit
  bool get isNightTime => WeatherEmojis.isNightTime(icon);

  // ============================================
  // üñºÔ∏è WIDGETS D'IC√îNES (M√âTHODES EXISTANTES)
  // ============================================

  /// Widget d'ic√¥ne depuis l'API OpenWeatherMap
  Widget get weatherIconWidget {
    return Image.network(
      'https://openweathermap.org/img/wn/$icon@2x.png',
      width: 60,
      height: 60,
      errorBuilder: (context, error, stackTrace) {
        return const Icon(Icons.error, size: 60);
      },
    );
  }

  /// Chemin d'asset pour les ic√¥nes locales
  String get iconAssetPath {
    const knownIcons = [
      '01d', '01n', '02d', '02n', '03d', '03n', '04d', '04n',
      '09d', '09n', '10d', '10n', '11d', '11n', '13d', '13n',
      '50d', '50n'
    ];

    if (knownIcons.contains(icon)) {
      return 'assets/images/weather/$icon.png';
    } else {
      return 'assets/images/weather/default.png';
    }
  }

  /// Widget d'ic√¥ne depuis les assets locaux
  Widget getAssetIconWidget({double size = 60}) {
    return Image.asset(
      iconAssetPath,
      width: size,
      height: size,
      errorBuilder: (context, error, stackTrace) {
        return Icon(Icons.wb_sunny, size: size);
      },
    );
  }

  // ============================================
  // üé® WIDGETS EMOJI (M√âTHODES EXISTANTES)
  // ============================================

  /// Widget emoji simple
  Widget getEmojiWidget({double fontSize = 60}) {
    return Text(
      iconEmoji,
      style: TextStyle(fontSize: fontSize),
    );
  }

  /// Widget emoji intelligent
  Widget getSmartEmojiWidget({double fontSize = 60}) {
    return Text(
      smartEmoji,
      style: TextStyle(fontSize: fontSize),
    );
  }

  /// Widget emoji avec description
  Widget getEmojiWithDescription({
    double fontSize = 48,
    double descriptionFontSize = 16,
  }) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          iconEmoji,
          style: TextStyle(fontSize: fontSize),
        ),
        const SizedBox(height: 4),
        Text(
          emojiDescription,
          style: TextStyle(
            fontSize: descriptionFontSize,
            color: Colors.grey[600],
          ),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  /// Widget combinant emoji et temp√©rature
  Widget getEmojiWithTemperature({
    double emojiSize = 48,
    double tempSize = 24,
  }) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          iconEmoji,
          style: TextStyle(fontSize: emojiSize),
        ),
        const SizedBox(width: 8),
        Text(
          temperatureString,
          style: TextStyle(
            fontSize: tempSize,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  // ============================================
  // üîß M√âTHODES UTILITAIRES
  // ============================================

  /// Obtient un ensemble d'emojis li√©s √† cette m√©t√©o
  List<String> getRelatedEmojis() {
    return [
      iconEmoji,
      temperatureEmoji,
      windEmoji,
      humidityEmoji,
    ];
  }

  /// Obtient un r√©sum√© emoji complet
  String get emojiSummary {
    return '$iconEmoji $temperatureEmoji $windEmoji $humidityEmoji';
  }

  // ‚≠ê M√âTHODE POUR CR√âER UNE COPIE AVEC DE NOUVELLES COORDONN√âES
  WeatherData copyWithCoordinates(double latitude, double longitude) {
    return WeatherData(
      cityName: cityName,
      country: country,
      temperature: temperature,
      feelsLike: feelsLike,
      description: description,
      icon: icon,
      humidity: humidity,
      pressure: pressure,
      windSpeed: windSpeed,
      visibility: visibility,
      dateTime: dateTime,
      sunrise: sunrise,
      sunset: sunset,
      latitude: latitude,
      longitude: longitude,
    );
  }

  // ============================================
  // üìä M√âTHODES DE S√âRIALISATION
  // ============================================

  Map<String, dynamic> toJson() {
    return {
      'cityName': cityName,
      'country': country,
      'temperature': temperature,
      'feelsLike': feelsLike,
      'description': description,
      'icon': icon,
      'humidity': humidity,
      'pressure': pressure,
      'windSpeed': windSpeed,
      'visibility': visibility,
      'dateTime': dateTime.millisecondsSinceEpoch,
      'sunrise': sunrise?.millisecondsSinceEpoch,
      'sunset': sunset?.millisecondsSinceEpoch,
      // ‚≠ê AJOUT DES COORDONN√âES AU JSON
      'latitude': latitude,
      'longitude': longitude,
    };
  }

  @override
  String toString() {
    String coordsInfo = hasCoordinates
        ? ' (${coordinatesString})'
        : '';
    return 'WeatherData(city: $displayName$coordsInfo, temp: $temperatureString, emoji: $iconEmoji)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is WeatherData &&
        other.cityName == cityName &&
        other.country == country &&
        other.dateTime == dateTime &&
        other.latitude == latitude &&
        other.longitude == longitude;
  }

  @override
  int get hashCode {
    return cityName.hashCode ^
    country.hashCode ^
    dateTime.hashCode ^
    latitude.hashCode ^
    longitude.hashCode;
  }
}